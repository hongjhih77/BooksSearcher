/*
 * Book Searcher
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.api.gen.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** A object containing books foound information */
@ApiModel(description = "A object containing books foound information")
@javax.annotation.Generated(
  value = "io.swagger.codegen.languages.java.JavaJerseyServerCodegen",
  date = "2018-04-19T00:06:49.154+08:00[Asia/Taipei]"
)
public class BooksSearchBody {

  @JsonProperty("found")
  private Integer found = null;

  @JsonProperty("notFound")
  private Integer notFound = null;

  @JsonProperty("notFoundList")
  private List<String> notFoundList = null;

  @JsonProperty("booksFoundList")
  private List<Book> booksFoundList = null;

  public BooksSearchBody found(Integer found) {
    this.found = found;
    return this;
  }

  /**
   * Get found
   *
   * @return found
   */
  @JsonProperty("found")
  @ApiModelProperty(value = "")
  public Integer getFound() {
    return found;
  }

  public void setFound(Integer found) {
    this.found = found;
  }

  public BooksSearchBody notFound(Integer notFound) {
    this.notFound = notFound;
    return this;
  }

  /**
   * Get notFound
   *
   * @return notFound
   */
  @JsonProperty("notFound")
  @ApiModelProperty(value = "")
  public Integer getNotFound() {
    return notFound;
  }

  public void setNotFound(Integer notFound) {
    this.notFound = notFound;
  }

  public BooksSearchBody notFoundList(List<String> notFoundList) {
    this.notFoundList = notFoundList;
    return this;
  }

  public BooksSearchBody addNotFoundListItem(String notFoundListItem) {

    if (this.notFoundList == null) {
      this.notFoundList = new ArrayList<String>();
    }

    this.notFoundList.add(notFoundListItem);
    return this;
  }

  /**
   * Get notFoundList
   *
   * @return notFoundList
   */
  @JsonProperty("notFoundList")
  @ApiModelProperty(value = "")
  public List<String> getNotFoundList() {
    return notFoundList;
  }

  public void setNotFoundList(List<String> notFoundList) {
    this.notFoundList = notFoundList;
  }

  public BooksSearchBody booksFoundList(List<Book> booksFoundList) {
    this.booksFoundList = booksFoundList;
    return this;
  }

  public BooksSearchBody addBooksFoundListItem(Book booksFoundListItem) {

    if (this.booksFoundList == null) {
      this.booksFoundList = new ArrayList<Book>();
    }

    this.booksFoundList.add(booksFoundListItem);
    return this;
  }

  /**
   * Get booksFoundList
   *
   * @return booksFoundList
   */
  @JsonProperty("booksFoundList")
  @ApiModelProperty(value = "")
  public List<Book> getBooksFoundList() {
    return booksFoundList;
  }

  public void setBooksFoundList(List<Book> booksFoundList) {
    this.booksFoundList = booksFoundList;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BooksSearchBody booksSearchBody = (BooksSearchBody) o;
    return Objects.equals(this.found, booksSearchBody.found)
        && Objects.equals(this.notFound, booksSearchBody.notFound)
        && Objects.equals(this.notFoundList, booksSearchBody.notFoundList)
        && Objects.equals(this.booksFoundList, booksSearchBody.booksFoundList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(found, notFound, notFoundList, booksFoundList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BooksSearchBody {\n");

    sb.append("    found: ").append(toIndentedString(found)).append("\n");
    sb.append("    notFound: ").append(toIndentedString(notFound)).append("\n");
    sb.append("    notFoundList: ").append(toIndentedString(notFoundList)).append("\n");
    sb.append("    booksFoundList: ").append(toIndentedString(booksFoundList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
